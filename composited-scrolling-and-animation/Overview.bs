<pre class='metadata'>
Title:  CSS Animation Worklet API Level 1
Status: ED
Group: houdini
ED: https://drafts.css-houdini.org/css-paint-api-1/
Previous Version:
Shortname: css-animation-api
Level: 1
Abstract:
Editor: Majid Valipour, majidvp@chromium.org

</pre>

<pre class="link-defaults">
spec:css-break-3; type:dfn; text:fragment
</pre>

<pre class="anchors">
urlPrefix: https://heycam.github.io/webidl/; type: dfn;
    text: NotSupportedError
    urlPrefix: #dfn-;
        text: callback this value
        text: exception
        text: throw
        url: throw; text: thrown
    url: es-invoking-callback-functions; text: Invoke
urlPrefix: https://html.spec.whatwg.org/multipage/scripting.html; type: dfn;
    text: reset the rendering context to its default state
    text: output bitmap
    text: set bitmap dimensions
    url: concept-canvas-alpha; text: alpha
urlPrefix: https://tc39.github.io/ecma262/#sec-; type: dfn;
    text: constructor
    text: Construct
    text: IsArray
    text: IsCallable
    text: IsConstructor
    text: HasProperty
    url: get-o-p; text: Get
    url: set-o-p-v-throw; text: Set
    url: terms-and-definitions-function; text: function
    urlPrefix: native-error-types-used-in-this-standard-
        text: TypeError
</pre>

Introduction {#intro}
=====================
This document introduces a new web API for creating fast rich animation effects by exposing
existing composited animation machinery to the web. For details on the rational and motivation
see [explainer.md][explainer].

The <a>Animation Worklet</a> provides a method to create scripted animations that can mutate a set
of user visible animatable attributes. The API is designed to make it possible such animations to
run in performance critical parts of rendering pipeline. Although the specification does not
require certain performance guarantees (e.g., running in sync with every frame produced and
isolated from main thread) but the API is designed to facilitate this.

Also in future versions we intent to introduce facilities for user code to to require specific
service level leading to guarantees about the performance of their animation code.

Relationship to web animation API: Animations running on <a>Animation Worklet</a> do not
necessarily run on main thread and thus are not synchronized with document timeline. At the moment
we do not expose any API to start, stop, compose or otherwise control these animations from
outside the worklet however such functionality can be build on top of the lower level messaging
primitives.

Access to input: We are interested on exposing additional user input (e.g., scrolling input) to
these animations so that authors can create jank-free input driven animations which are not really possible today.


Animation Worklet {#animation-worklet}
==============================
<dfn>Animation Worklet</dfn> is a {{Worklet}} responsible for custom animators. The {{animationWorklet}}
attribute allows access to it.

The {{animationWorklet}}'s <a>worklet global scope type</a> is {{AnimationWorkletGlobalScope}}.

<pre class='idl'>
partial interface Window {
    [SameObject] readonly attribute Worklet animationWorklet;
};
</pre>

<pre class='idl'>
callback VoidFunction = void ();

[Global=(Worklet,AnimationWorklet),Exposed=AnimationWorklet]
interface AnimationWorkletGlobalScope : WorkletGlobalScope {
    void registerAnimation(DOMString name, VoidFunction animationCtor);
};
</pre>


<div class='note'>
    Note: This is how the class should look.
    <pre class='idl'>
        callback interface AnimationClass {
            void animate(DOMHighResolutionTimeStamp timestamp);
            attribute EventHandler onmessage;
        };
    </pre>
</div>



Concepts {#concepts}
====================
A <dfn>animation definition</dfn> describes an author defined animation which can be referenced by
a <a>custom animator</a>. It consists of:

 - A <dfn>class constructor</dfn> which is the class <a>constructor</a>

 - A <dfn>animation function</dfn> which is the animation <a>function</a> callback


A <dfn>worklet animatable attribute</dfn> is an attribute that can be read modified inside
an <a>Animation Worklet</a>.

Note: Initially Chrome only supports "accelerated" attributes (i.e., 'opacity', 'transform', and
'scroll offset') but a user agent may expose any attribute which may be animated efficiently
without being subject to slowness in main thread.

Issue: The description for what may be an animatable attribute is hand wavy. This should be
    defined as a subset of animatable properties as described in web animation spec.


An <dfn>animation proxy</dfn> defines a handle to an element which can be used to read or mutate
explicitly exposed <a>worklet animatable attribute</a> on it.

A <dfn>custom animator</dfn> describes a fully realized animation that links an <a>animation
definition</a> with some state including specific animation proxies. It consists of:

 - A animation name

 - A state property which is a <a>structured data</a>.

 - An <a>animation requested flag</a>

Registering a Custom Animation {#registering-custom-animation}
============================================================
The {{AnimationWorkletGlobalScope}} has a <dfn>animation name to animation definition map</dfn>.
The map gets populated when {{registerAnimation(name, animationCtor)}} is called.

When the <dfn method for=AnimationWorkletGlobalScope>registerAnimation(|name|,
|animationCtor|)</dfn> method is called, the user agent <em>must</em> run the following steps:

    1. If the |name| is not a valid <<ident>>, <a>throw</a> a <a>TypeError</a> and abort all these
        steps.

    2. If the |name| exists as a key in the <a>animation name to animation definition map</a>,
        <a>throw</a> a <a>NotSupportedError</a> and abort all these steps.

    3. If the result of <a>IsConstructor</a>(|animationCtor|) is false, <a>throw</a> a
        <a>TypeError</a> and abort all these steps.

    4. Let |prototype| be the result of <a>Get</a>(|animationCtor|, "prototype").

    5. If the result of <a>Type</a>(|prototype|) is not Object, <a>throw</a> a <a>TypeError</a>
        and abort all these steps.

    6. Let |animate| be the result of <a>Get</a>(|prototype|, "paint").

    7. If the result of <a>IsCallable</a>(|animate|) is false, <a>throw</a> a <a>TypeError</a> and
        abort all these steps.

    8. Let |definition| be a new <a>animation definition</a> with:

        - <a>animation name</a> being |name|

        - <a>class constructor</a> being |animationCtor|

        - <a>animation function</a> being |animate|

    9. Add the key-value pair (|name| - |definition|) to the <a>animation name to animation
        definition map</a> of the associated <a>document</a>.

Note: Taken from paint API spec with some simplifications.


The {{AnimationWorkletGlobalScope}} has a <dfn>animation name to instance map</dfn>.
The map is populated when the author constructs a new custom animator instant.


Creating a Custom Animator {#creating-custom-animator}
====================================================
The {{AnimationWorkletGlobalScope}} has a <dfn>animator instance list</dfn>. The list is populated
when the author constructs a new <a>custom animator</a> instance.

The animator instances contains animator specific state so unlike animation instances they
cannot be disposed arbitrarily.

<pre class='idl'>
[
    Exposed=(Window),
    RaisesException=Constructor,
    Constructor(DOMString name)
] interface CustomAnimator { };
</pre>

When the {{CustomAnimator}} constructor is called the user agent <em>must</em> run the following
steps:

    1.  Let |name| be the first argument of the constructor.

    2.  Let |workletGlobalScope| be a {{PaintWorkletGlobalScope}} from the list of <a>worklet's
         WorkletGlobalScopes</a> from the paint {{Worklet}}.

    3. Let |definition| be the result of looking up |name| on the |workletGlobalScope|'s
        <a>animation name to animation definition map</a>.

        If |definition| does not exist, throw <a>throw</a> a <a>NotSupportedError</a> and abort
        the following steps.

    4. Let |animator| be a new {{CutomAnimator}} with:

        - <a>animation name</a> being |name|

        - state property being {{null}}

        - <a>animation request flag</a> being <a>animation-requested</a>

    4. Add |animator| to <a>animator instance list</a>.


Issue: Consider passing an state object in the constructor (which can include proxies) so the
animator can start ticking and being useful immediately.


Creating Animation Proxy {#creating-animation-proxy}
====================================================
An <a>animation proxy</a> can be constructed in the document scope using the {{AnimationProxy}}
constructor. The constructor should return a new proxy which allow mutation of requested
<a>worklet animatable attribute</a>s or throw an exception if it cannot.

An animation proxy can be serialized in a message and posted to any <a>custom animator</a>.

<pre class='idl'>
[
    Exposed=(Window,AnimationWorklet),
    RaisesException=Constructor,
    Constructor(Element, Array<DOMString> proxiedAttributes);
] interface AnimationProxy {
    [RaisesException] getter CSSStyleValue? (DOMString name);;
    [RaisesException] setter void (DOMString name, CSSStyleValue? value);

    boolean has(DOMString property);
    void disconnect();
};

</pre>

Issue: Perhaps AnimationProxy should inherit {{StylePropertyMap}}

Issue: Explain what {{disconnect}} does. Also explain what happens if the proxies element
    is removed. In paint, layout API the worklet instance lifetime is tied to the lifetime of
    the element. In Animation Worklet, this is not the case so proxied element may get removed
    while worklet has a handle on them. Explain what happens then.


Running a Custom Animator {#running-custom-animator}
======================================================
Each <a>custom animator</a> is associated with an <dfn>animation requested flag</dfn>. It must be
either <dfn>animation-requested</dfn>, <dfn>animation-not-requested</dfn>. It is initially set to
<a>animation-not-requested</a>.

When a user agent decides to produce a new animation frame, if for a <a>custom animator</a> the
associated <a>animation request flag</a> is <a>animation-requested</a> then the the user agent
<em>may</em> <a>generate a custom animation frame</a> for the current frame.


Note: The user agent is not required to run animations on every frame. It is legal to defer the
      <a>generate an animation frame<a> until a later frame. This allow the user agent to provide
      a different service level according to their policy. See <a>Service LeveL</a> for more
      details.


To generate a custom animation frame, the user agent iterates over <a>animator instance list</a>
as |animator|:

  1. If the <a>animation requested flag</a> for the animator is <a>animation-not-requested</a>
     the user agent <em>may</em> abort all the following steps and delete the animator instance.

  2. Let |name| be the animation name of |animator|.

  3. Let |state| be the state of |animator|.

  4. Let |workletGlobalScope| be a {{AnimationWorkletGlobalScope}} from the list of <a>worklet's
      WorkletGlobalScopes</a> from the animation {{Worklet}}.

  5. Let the |definition| be the result of looking up |name| on the |workletGlobalScope|'s
      <a>animation name to animation definition map</a>.

      If |definition| does not exist abort the following steps.

  6. Let |animationInstance| be the result of looking up |name| on |workletGlobalScope|'s <a>paint
      name to instance map</a>. If |animationInstance| is null run the following substeps:
      TODO: Add steps to create new animation instance given the animation definition.
          The algorithm should use <a>CreateDataProperty</>(instance, "state", {{null}})
          to create the state property

  7. If the result of <a>Set</a>(|animationInstance|, "state", |state|) is false abort the
      following steps.

  8. Let |animateFunction| be |definition|'s <a>animation function</a>.

  9. Let |timestamp| be a {{DOMHighResTimeStamp}} indicating the current frame start time.

  10. <a>Invoke</a> |animateFunction| with arguments «|timestamp|»,
       and with |animationInstance| as the <a>callback this value</a>.

  11. If the result of <a>Set</a>(|animationInstance|, "state", {{null}}) is false abort the
       following steps.

Note: It is legal for the user agent to call animate multiple times in the same frame.

Issue: Should we keep track of proxies passed to a worklet and not <a>animate</a> any
    <a>custom animators</a> whose proxies are not within the visual viewport or whose attributes
    are not mutated.

Issue: We currently do not have an "initialized" notion. One option is to delay any message to
    the animator to be delayed until all its proxies are initialized. A better option is to allow
    the proxy to be mutated while uninitialized, it is just that the values will not have any
    effect. The initial value of properties will be the value at the creation time.

Closing a Custom Animator {#closing-custom-animator}
====================================================
TODO: Define a close function that ends the animator. It can be called from document context or
animation context.

Receiving and Sending Message {#receiving-and-sending-message}
=============================================================
TODO: an animator may send and receive messages.


Service Level {#service-level}
==============================
TODO: Describe three difference service level that user agent <em>may</em> provide.

1. In sync with compositor frame production (isolated, sync)
2. Async from compositor but on own dedicated thread (isolated, async)
3. Async but on main frame with timing defined in relation to existing rAF (not isolated, async)

Issue: Maybe this should become a v2 concept where we also introduce an API to allow authors to
    request a certain service level.


Examples {#examples}
====================

Example 1: A parallax background. {#example-1}
-----------------------------------------

<pre class='lang-markup'>
&lt;div id="scroller"&gt;
    &lt;div id="scroller"&gt;
    &lt;/div&gt;
    Some content that overflows
&lt;/div&gt;

<pre class='lang-javascript'>
// Inside AnimationWorkletGlobalScope.
registerAnimation('parallax', class {
    animate(timestamp) {
        // read scroller vertical scroll offset.
        const scrollTop = this.state.scroller.scrollTop
        // update parallax transform
        let t = this.state.parallax.transform;
        t.m42 =  -0.2 * scrollTop;
        this.state.parallax.transform = t;
    }

    onmessage(message) {
        this.state.scroller = message.data[0]
        this.state.parallax = message.data[1];
    }
});

// Inside document scope

document.animationWorklet.import('parallax.js').then(function() {
    var scroller = new AnimationProxy(getElementById('scroller'), ['scrollTop']);
    var parallax = new AnimationProxy(getElementById('parallax'), ['transform']);

    var worklet = new AnimationWorklet('parallax');
    worklet.postMessage([scroller, parallax]);
});

</pre>
